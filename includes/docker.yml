.docker:test:
  # image: docker:stable
  # services:
  #   - name: docker:dind
  #     alias: dindservice
  #     entrypoint: ["env", "-u", "DOCKER_HOST"]
  #     command: ["dockerd-entrypoint.sh"]
  image: ubuntu:22.04
  variables:
    # DOCKER_HOST: tcp://dindservice:2375
    # DOCKER_TLS_CERTDIR: ""
    # TRIVY_CACHE_DIR: "./trivycache/"
    IMAGE: $IMAGE_NAME:$TAG
  # services:
  #   - name: docker:stable
  #     alias: dindservice
  # variables:
  #   DOCKER_HOST: tcp://dindservice:2375
  #   DOCKER_DRIVER: overlay2
  #   # See https://github.com/docker-library/docker/pull/166
  #   DOCKER_TLS_CERTDIR: ""
  #   IMAGE: $IMAGE_NAME:$TAG
  #   TRIVY_NO_PROGRESS: "true"
  #   TRIVY_CACHE_DIR: "./trivycache/"
  before_script:
    - export TRIVY_VERSION=$(wget -qO - "https://api.github.com/repos/aquasecurity/trivy/releases/latest" | grep '"tag_name":' | sed -E 's/.*"v([^"]+)".*/\1/')
    # - wget --no-verbose https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -zxvf -
    - wget https://github.com/aquasecurity/trivy/releases/download/v${TRIVY_VERSION}/trivy_${TRIVY_VERSION}_Linux-64bit.tar.gz -O - | tar -xzv
    - echo "$(ls -la)"
    - wget https://get.docker.com -o get-docker.sh
    - sh get-docker.sh
    - echo "$(docker info)"
    # - docker build -t $IMAGE .
    # - ./trivy image --clear-cache
    # - ./trivy \
    #   --cache-dir ./trivycache \
    #   image \
    #     --vuln-type os,library \
    #     --ignore-unfixed \
    #     --no-progress \
    #     --scanners vuln,secret,config \
    #     --exit-code 0 \
    #     --format template \
    #     --template "@contrib/html.tpl" \
    #     -o trivy-image.html \
    #     $IMAGE
    # - echo "$(ls -la)"
  allow_failure: true
  script:
    - cd "$WORKING_DIR"
    - echo "$(ls -la)"
    # Build image
    - docker build -t $IMAGE .
    - echo "$(docker ps)"
    # - ./trivy image --security-checks vuln,config --clear-cache
    # - ./trivy image --security-checks vuln,config --exit-code 0 --format template --template "@contrib/html.tpl" -o trivy-image.html $IMAGE
    - ./trivy image --clear-cache
    - ./trivy image \
      --vuln-type os,library \
      --ignore-unfixed \
      --scanners vuln,secret,config \
      --exit-code 0 \
      --format template \
      --template "@contrib/html.tpl" \
      -o trivy-image.html \
      $IMAGE
    # - ./trivy image \
    #   --vuln-type os,library \
    #   --ignore-unfixed \
    #   --scanners vuln,secret,config \
    #   --exit-code 0 \
    #   --format json \
    #   -o trivy-image.json \
    #   $IMAGE
    # - echo "$(ls -la)"
    # test
    # - ./trivy filesystem --security-checks config,vuln --exit-code 0 --format template --template "@contrib/html.tpl" -o trivy-fs.html ./$WORKING_DIR
    # - ./trivy filesystem --severity CRITICAL --security-checks config,vuln --exit-code 1 --format template --template "@contrib/html.tpl" -o trivy-fs-critical.html ./$WORKING_DIR
    # - ./trivy image --security-checks vuln,config --severity CRITICAL --exit-code 1 --format template --template "@contrib/html.tpl" -o trivy-image-critical.html $IMAGE
    # Combine report
    # - apk update && apk add jq
    # - jq -s 'add' gl-codeclimate-image.json gl-codeclimate-fs.json > gl-codeclimate.json
  cache:
    paths:
      - .trivycache/
  artifacts:
    when: always
    paths:
      - $WORKING_DIR/trivy*.html

.docker:build:
  image: docker:stable
  variables:
    DOCKER_HOST: tcp://dindservice:2375
    DOCKER_TLS_CERTDIR: ""
  services:
    - name: docker:stable-dind
      alias: dindservice
  before_script:
    - docker info
  script:
    - cd "$WORKING_DIR"
    - echo "$DOCKER_AUTH" > $HOME/.docker/config.json
    # - docker login $REGISTRY_URL -u="${REGISTRY_USERNAME}" -p $REGISTRY_TOKEN
    - docker login $REGISTRY_URL
    - docker build -t $REGISTRY_URL/$IMAGE_NAME:$TAG .
    - docker push $REGISTRY_URL/$IMAGE_NAME:$TAG

.kaniko:build:
  image:
    name: gcr.io/kaniko-project/executor:debug
    entrypoint: [""]
  script:
    - mkdir -p /kaniko/.docker
    - echo "$DOCKER_AUTH" > /kaniko/.docker/config.json
    - /kaniko/executor --context="$CI_PROJECT_DIR/$WORKING_DIR" --dockerfile="$CI_PROJECT_DIR/$WORKING_DIR/$DOCKERFILE" --destination $REGISTRY_URL/$IMAGE_NAME:$TAG

